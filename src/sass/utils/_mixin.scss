@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// font-size: 18px;
// font-weight: 400;
// line-height: 1.33;
@mixin font($fs: 18px, $fw: 400, $lh: 24px) {
  font-size: $fs;
  font-weight: $fw;
  line-height: decimal-round($lh/$fs, 2);
}

// display: flex;
// flex-wrap: wrap;
// align-items: center;
// justify-content: center;
@mixin flex-center($df: flex, $jc: center, $al: center, $fw: wrap) {
  display: $df;
  flex-wrap: $fw;
  align-items: $al;
  justify-content: $jc;
}

// @media screen and (min-device-pixel-ratio: 2) and (min-width: *width*),
//     screen and (min-resolution: 192dpi) and (min-width: *width*),
//     screen and (min-resolution: 2dppx) and (min-width: *width*) {
//     background-image: url(*image*);
//   }
@mixin retina($image, $width) {
  @media screen and (min-device-pixel-ratio: 2) and (min-width: map-get($min-widths, $width)),
    screen and (min-resolution: 192dpi) and (min-width: map-get($min-widths, $width)),
    screen and (min-resolution: 2dppx) and (min-width: map-get($min-widths, $width)) {
    background-image: url($image);
  }
}

// @media screen and (min-width: *width*)
@mixin min-width($width) {
  @media (min-width: map-get($min-widths, $width)) {
    @content;
  }
}

// @media screen and (min-width: *width*)
@mixin max-width($width) {
  @media (max-width: map-get($max-widths, $width)) {
    @content;
  }
}
